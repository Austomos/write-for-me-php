<?php

namespace Austomos\WriteForMePhp\Tests\Api;

use Austomos\WriteForMePhp\Api\Client;
use Austomos\WriteForMePhp\Exceptions\WriteForMeException;
use Austomos\WriteForMePhp\UserLogin;
use Austomos\WriteForMePhp\WriteForMe;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use Mockery;
use PHPUnit\Framework\TestCase;
use ReflectionClass;
use GuzzleHttp\Client as GuzzleClient;
use GuzzleHttp\Handler\MockHandler;

class ClientTest extends TestCase
{

    protected function setUp(): void
    {
        parent::setUp();
        $mockUserLogin = new UserLogin('mock_username', 'mock_password');
        $reflection = new ReflectionClass(UserLogin::class);
        $clientProperty = $reflection->getProperty('login');
        $clientProperty->setValue(
            $mockUserLogin,
            ['token' => 'mock_token', 'success' => true]
        );

        $mockWriteForMe = new WriteForMe();
        $reflection = new ReflectionClass(WriteForMe::class);
        $clientProperty = $reflection->getProperty('login');
        $clientProperty->setValue(
            $mockWriteForMe,
            $mockUserLogin
        );
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testRequestGuzzleExceptionThrew(): void
    {
        $client = $this->getMockForAbstractClass(Client::class);
        $client->expects($this->once())
            ->method('isValidOptions')
            ->willReturn(true);

        $mockHandler = new MockHandler([
            new RequestException(
                'Unauthorized mock',
                new Request('GET', '/getSolutions'),
                new Response(401, reason: 'Unauthorized mock')
            )
        ]);

        $reflection = new ReflectionClass(Client::class);
        $clientProperty = $reflection->getProperty('guzzleClient');
        $clientProperty->setValue(
            $client,
            new GuzzleClient([
                'handler' => HandlerStack::create($mockHandler)
            ])
        );

        try {
            $client->request();
        } catch (WriteForMeException $e) {
            $this->fail($e->getMessage());
        }
    }

}
